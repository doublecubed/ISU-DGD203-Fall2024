// Code generated by Claude.ai

using FirstGame;

public class GameMap
{
    #region REFERENCES

    private Game _game;
    
    #endregion
    
    #region VARIABLES

    private const int DefaultWidth = 5;
    private const int DefaultHeight = 5;
    
    private readonly int _width;
    private readonly int _height;
    private Vector2Int _playerPosition;
    private readonly Location[,] _mapLocations;

    #endregion
    
    #region INTERNAL CLASSES
    public class Location
    {
        public string Name { get; set; }
        public string Description { get; set; }
        public bool IsAccessible { get; set; }
        
        public List<Item> Items { get; set; }
        public Dictionary<string, string> InteractiveObjects { get; set; }

        public Location(string description = "There's nothing here", bool isAccessible = true)
        {
            Description = description;
            IsAccessible = isAccessible;
            InteractiveObjects = new Dictionary<string, string>();
            Items = new List<Item>();
        }
    }

    #endregion
    
    #region CONSTRUCTOR
    
    public GameMap(Game game, int width, int height, Vector2Int startPosition)
    {
        _game = game;
        
        CheckInputDimensions(ref width, ref height);

        _width = width;
        _height = height;
        _mapLocations = new Location[width, height];
        
        // Initialize all locations with default values
        for (int x = 0; x < width; x++)
        {
            for (int y = 0; y < height; y++)
            {
                _mapLocations[x, y] = new Location();
            }
        }
        

        // Set initial player position if valid
        if (IsValidPosition(startPosition))
        {
            _playerPosition = startPosition;
        }
        else
        {
            _playerPosition = new Vector2Int() ;
        }
    }
    
    #endregion

    #region METHODS

    private void CheckInputDimensions(ref int width , ref int height)
    {
        if (width <= 0 || height <= 0)
        {
            width = DefaultWidth;
            height = DefaultHeight;
        }
    }
    
    public Vector2Int GetPlayerPosition() => _playerPosition;

    /*
    // The method above does the same thing as this one:
    public (int x, int y) GetPlayerPosition()
    {
        return _playerPosition;
    }
    */

    public bool MovePlayer(Direction direction)
    {
        var newPosition = CalculateNewPosition(direction);
        return SetPlayerPosition(newPosition);
    }

    public bool MovePlayer(Vector2Int targetPosition)
    {
        return SetPlayerPosition(targetPosition);
    }

    private bool SetPlayerPosition(Vector2Int targetPosition)
    {
        if (IsValidPosition(targetPosition) && _mapLocations[targetPosition.X, targetPosition.Y].IsAccessible)
        {
            _playerPosition = targetPosition;
            return true;
        }
        return false;
    }
    
    private Vector2Int CalculateNewPosition(Direction direction)
    {
        // switch chooses from the possible cases, and then does the code inside.
        // It is a version of if for limited case scenarios
        
        Vector2Int newPosition = new Vector2Int();
        newPosition = _playerPosition;
        
        switch (direction)
        {
            case Direction.North:
                newPosition.Y += 1;
                break;
            case Direction.South:
                newPosition.Y -= 1;
                break;
            case Direction.West:
                newPosition.X -= 1;
                break;
            case Direction.East:
                newPosition.X += 1;
                break;
            default:
                Console.WriteLine("That is not a valid direction");
                break;
        }

        return newPosition;
    }

    private bool IsValidPosition(Vector2Int position)
    {
        return position.X >= 0 && position.X < _width && 
               position.Y >= 0 && position.Y < _height;
    }

    public Location GetCurrentLocation()
    {
        return _mapLocations[_playerPosition.X, _playerPosition.Y];
    }

    public void SetLocationDescription(Vector2Int position, string description)
    {
        if (IsValidPosition(position))
        {
            _mapLocations[position.X, position.Y].Description = description;
        }
    }

    public void SetLocationAccessibility(Vector2Int position, bool isAccessible)
    {
        if (IsValidPosition(position))
        {
            _mapLocations[position.X, position.Y].IsAccessible = isAccessible;
        }
    }

    public void AddInteractiveObject(Vector2Int position, string objectName, string description)
    {
        if (IsValidPosition(position))
        {
            _mapLocations[position.X, position.Y].InteractiveObjects[objectName] = description;
        }
    }
    
    #endregion
}

public enum Direction
{
    East,
    North,
    West,
    South,
    NorthEast,
    NorthWest,
    SouthEast,
    SouthWest,
    Up,
    Down,
    Inside,
    Outside,
    Right,
    Forward,
    Left,
    Back
}

public struct MapLocationLoadData
{
    public Vector2Int Coordinates;
    public string Name;
    public string Description;
    public bool IsAccessible;
    public Item[] Items;
}